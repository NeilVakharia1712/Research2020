The Grinch is given the job of partitioning 2n players into two teams of n
players each. Each player has a numerical rating that measures how good he/she is
at the game. He seeks to divide the players as unfairly as possible, so as to create
the biggest possible talent imbalance between team A and team B. Show how the
Grinch can do the job in O(n log n) time.

Let S be an unsorted array of n integers. Give an algorithm that finds the pair
x, y ∈ S that maximizes |x−y|. Your algorithm must run in O(n) worst-case time.

Let S be a sorted array of n integers. Give an algorithm that finds the pair
x, y ∈ S that maximizes |x − y|. Your algorithm must run in O(1) worst-case time.

Let S be an unsorted array of n integers. Give an algorithm that finds the pair
x, y ∈ S that minimizes |x − y|, for x/= y. Your algorithm must run in O(n log n)
worst-case time.

Let S be a sorted array of n integers. Give an algorithm that finds the pair
x, y ∈ S that minimizes |x − y|, for x /= y. Your algorithm must run in O(n)
worst-case time.

Take a sequence of 2n real numbers as input. Design an O(n log n) algorithm that
partitions the numbers into n pairs, with the property that the partition minimizes
the maximum sum of a pair. For example, say we are given the numbers (1,3,5,9).
The possible partitions are ((1,3),(5,9)), ((1,5),(3,9)), and ((1,9),(3,5)). The pair
sums for these partitions are (4,14), (6,12), and (10,8). Thus the third partition has
10 as its maximum sum, which is the minimum over the three partitions.

Assume that we are given n pairs of items as input, where the first item is a
number and the second item is one of three colors (red, blue, or yellow). Further
assume that the items are sorted by number. Give an O(n) algorithm to sort the
items by color (all reds before all blues before all yellows) such that the numbers
for identical colors stay sorted.
For example: (1,blue), (3,red), (4,blue), (6,yellow), (9,red) should become (3,red),
(9,red), (1,blue), (4,blue), (6,yellow).

The mode of a set of numbers is the number that occurs most frequently in the
set. The set (4, 6, 2, 4, 3, 1) has a mode of 4. Give an efficient and correct algorithm
to compute the mode of a set of n numbers.

Given two sets S1 and S2 (each of size n), and a number x, describe an O(n log n)
algorithm for finding whether there exists a pair of elements, one from S1 and one
from S2, that add up to x. (For partial credit, give a Θ(n2) algorithm for this
problem.)

Outline a reasonable method of solving each of the following problems. Give
the order of the worst-case complexity of your methods.

You are given a pile of thousands of telephone bills and thousands of checks
sent in to pay the bills. Find out who did not pay.

You are given a list containing the title, author, call number and publisher of
all the books in a school library and another list of 30 publishers. Find out
how many of the books in the library were published by each company.

You are given all the book checkout cards used in the campus library during
the past year, each of which contains the name of the person who took out
the book. Determine how many distinct people checked out at least one book.

Given a set of S containing n real numbers, and a real number x. We seek an
algorithm to determine whether two elements of S exist whose sum is exactly x.

Assume that S is unsorted. Give an O(n log n) algorithm for the problem.

Assume that S is sorted. Give an O(n) algorithm for the problem.

Give an efficient algorithm to compute the union of sets A and B, where
n = max(|A|, |B|). The output should be an array of distinct elements that form
the union of the sets, such that they appear more than once in the union.

Assume that A and B are unsorted. Give an O(n log n) algorithm for the
problem.

Assume that A and B are sorted. Give an O(n) algorithm for the problem.

Given a set S of n integers and an integer T, give an O(nk−1 log n) algorithm
to test whether k of the integers in S add up to T.

Design an O(n) algorithm that, given a list of n elements, finds all the elements
that appear more than n/2 times in the list. Then, design an O(n) algorithm that,
given a list of n elements, finds all the elements that appear more than n/4 times.

Devise an algorithm for finding the k smallest elements of an unsorted set of n
integers in O(n + k log n).

You wish to store a set of n numbers in either a max-heap or a sorted array.
For each application below, state which data structure is better, or if it does not
matter. Explain your answers.
(a) Want to find the maximum element quickly.
(b) Want to be able to delete an element quickly.
(c) Want to be able to form the structure quickly.
(d) Want to find the minimum element quickly.

Give an O(n log k)-time algorithm that merges k sorted lists with a total of n
elements into one sorted list. (Hint: use a heap to speed up the elementary O(kn)-
time algorithm).

Give an efficient algorithm to find the second-largest key among n keys.
You can do better than 2n − 3 comparisons.

Then, give an efficient algorithm to find the third-largest key among n keys.
How many key comparisons does your algorithm do in the worst case? Must your
algorithm determine which key is largest and second-largest in the process?

Use the partitioning idea of quicksort to give an algorithm that finds the median
element of an array of n integers in expected O(n) time. (Hint: must you look at
both sides of the partition?)

Suppose quicksort always pivoted on the median of the current sub-array. How
many comparisons would Quicksort make then in the worst case?

Suppose quicksort were always to pivot on the [n/3]
th smallest value of the current sub-array. How many comparisons would be made then in the worst case?

Show that a permutation of n items has at most n(n−1)/2 inversions. Which
permutation(s) have exactly n(n − 1)/2 inversions?

Let P be a permutation and Pr be the reversal of this permutation. Show
that P and Pr have a total of exactly n(n − 1)/2 inversions.

Use the previous result to argue that the expected number of inversions in a
random permutation is n(n − 1)/4.

Give an efficient algorithm to rearrange an array of n keys so that all the
negative keys precede all the nonnegative keys. Your algorithm must be in-place,
meaning you cannot allocate another array to temporarily hold the items. How fast
is your algorithm?

Stable sorting algorithms leave equal-key items in the same relative order as in
the original permutation. Explain what must be done to ensure that mergesort is
a stable sorting algorithm.

Show that n positive integers in the range 1 to k can be sorted in O(n log k)
time. The interesting case is when k << n.

We seek to sort a sequence S of n integers with many duplications, such that
the number of distinct integers in S is O(log n). Give an O(n log log n) worst-case
time algorithm to sort such sequences.

Let A[1..n] be an array such that the first n − sqrt(n)elements are already sorted
(though we know nothing about the remaining elements). Give an algorithm that
sorts A in substantially better than n log n steps.

Assume that the array A[1..n] only has numbers from {1, . . . , n2} but that at
most log log n of these numbers ever appear. Devise an algorithm that sorts A in
substantially less than O(n log n).

onsider the problem of sorting a sequence of n 0’s and 1’s using comparisons.
For each comparison of two values x and y, the algorithm learns which of x < y,
x = y, or x > y holds.

Give an algorithm to sort in n − 1 comparisons in the worst case. Show that
your algorithm is optimal.

Give an algorithm to sort in 2n/3 comparisons in the average case (assuming
each of the n inputs is 0 or 1 with equal probability). Show that your algorithm
is optimal.

Let P be a simple, but not necessarily convex, polygon and q an arbitrary
point not necessarily in P. Design an efficient algorithm to find a line segment
originating from q that intersects the maximum number of edges of P. In other
words, if standing at point q, in what direction should you aim a gun so the bullet
will go through the largest number of walls. A bullet through a vertex of P gets
credit for only one wall. An O(n log n) algorithm is possible.

Suppose you are given an array A of n sorted numbers that has been circularly
shifted k positions to the right. For example, {35, 42, 5, 15, 27, 29} is a sorted array
that has been circularly shifted k = 2 positions, while {27, 29, 35, 42, 5, 15} has been
shifted k = 4 positions. Suppose you know what k is. Give an O(1) algorithm to find the largest
number in A. Suppose you do not know what k is. Give an O(lg n) algorithm to find the
largest number in A. For partial credit, you may give an O(n) algorithm.

Consider the numerical 20 Questions game. In this game, Player 1 thinks of a
number in the range 1 to n. Player 2 has to figure out this number by asking the
fewest number of true/false questions. Assume that nobody cheats. What is an optimal strategy if n in known? What is a good strategy is n is not known?

Suppose that you are given a sorted sequence of distinct integers {a1, a2, . . . , an}.
Give an O(lg n) algorithm to determine whether there exists an i index such as
ai = i. For example, in {−10,−3, 3, 5, 7}, a3 = 3. In {2, 3, 4, 5, 6, 7}, there is no
such i.

Suppose that you are given a sorted sequence of distinct integers {a1, a2, . . . , an},
drawn from 1 to m where n < m. Give an O(lg n) algorithm to find an integer ≤ m
that is not present in a. For full credit, find the smallest such integer.

Let M be an n×m integer matrix in which the entries of each row are sorted in
increasing order (from left to right) and the entries in each column are in increasing
order (from top to bottom). Give an efficient algorithm to find the position of an
integer x in M, or to determine that x is not there. How many comparisons of x
with matrix entries does your algorithm use in worst case?

Consider an n×n array A containing integer elements (positive, negative, and
zero). Assume that the elements in each row of A are in strictly increasing order,
and the elements of each column of A are in strictly decreasing order. (Hence there
cannot be two zeroes in the same row or the same column.) Describe an efficient
algorithm that counts the number of occurrences of the element 0 in A. Analyze its
running time.

Implement versions of several different sorting algorithms, such as selection sort,
insertion sort, heapsort, mergesort, and quicksort. Conduct experiments to assess
the relative performance of these algorithms in a simple application that reads a
large text file and reports exactly one instance of each word that appears within it.
This application can be efficiently implemented by sorting all the words that occur
in the text and then passing through the sorted sequence to identify one instance
of each distinct word. Write a brief report with your conclusions.

Implement an external sort, which uses intermediate files to sort files bigger
than main memory. Mergesort is a good algorithm to base such an implementation
on. Test your program both on files with small records and on files with large
records.

Design and implement a parallel sorting algorithm that distributes data across
several processors. An appropriate variation of mergesort is a likely candidate. Measure
the speedup of this algorithm as the number of processors increases. Later,
compare the execution time to that

If you are given a million integers to sort, what algorithm would you use to sort
them? How much time and memory would that consume?

Describe advantages and disadvantages of the most popular sorting algorithms.

Implement an algorithm that takes an input array and returns only the unique
elements in it.

You have a computer with only 2Mb of main memory. How do you use it to sort
a large file of 500 Mb that is on disk?

Design a stack that supports push, pop, and retrieving the minimum element
in constant time. Can you do this?

Given a search string of three words, find the smallest snippet of the document
that contains all three of the search words—i.e. , the snippet with smallest number
of words in it. You are given the index positions where these words in occur search
strings, such as word1: (1, 4, 5), word2: (4, 9, 10), and word3: (5, 6, 15). Each of
the lists are in sorted order, as above.

You are given 12 coins. One of them is heavier or lighter than the rest. Identify
this coin in just three weighings.