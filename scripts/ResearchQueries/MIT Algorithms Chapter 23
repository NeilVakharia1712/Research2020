Let (u,v) be a minimum-weight edge in a connected graph G. Show that (u,v) belongs to some minimum spanning tree of G.

Professor Sabatier conjectures the following converse of Theorem 23.1. Let G = (V,E)
be a connected, undirected graph with a real-valued weight function w defined
on E. Let A be a subset of E that is included in some minimum spanning
tree for G, let (S, V-S) be any cut of G that respects A, and let (u,v) be a safe
edge for A crossing (S, V-S) Then, (u,v) is a light edge for the cut. Show that
the professor’s conjecture is incorrect by giving a counterexample.

Show that if an edge (u,v) is contained in some minimum spanning tree, then it is
a light edge crossing some cut of the graph.

Give a simple example of a connected graph such that the set of edges {(u,v): there exists a cut (S, V-S) such that (u,v) is a light edge crossing (S, V-S)} does not form a minimum spanning tree.

Let e be a maximum-weight edge on some cycle of connected graph G = (V,E) Prove that there is a minimum spanning tree of G' = (V, E-{e}) feg/ that is also a minimum spanning tree of G. That is, there is a minimum spanning tree of G that does not include e

Show that a graph has a unique minimum spanning tree if, for every cut of the
graph, there is a unique light edge crossing the cut. Show that the converse is not
true by giving a counterexample.

Argue that if all edge weights of a graph are positive, then any subset of edges that
connects all vertices and has minimum total weight must be a tree. Give an example
to show that the same conclusion does not follow if we allow some weights to be
nonpositive.

Let T be a minimum spanning tree of a graph G, and let L be the sorted list of the
edge weights of T . Show that for any other minimum spanning tree T' of G, the
list L is also the sorted list of edge weights of T'.

Let T be a minimum spanning tree of a graph G  = (V,E), and let V' be a subset
of V . Let T' be the subgraph of T induced by V', and let G' be the subgraph of G
induced by V'. Show that if T' is connected, then T' is a minimum spanning tree
of G'.

Given a graph G and a minimum spanning tree T , suppose that we decrease the
weight of one of the edges not in T . Give an algorithm for finding the minimum
spanning tree in the modified graph.

Kruskal’s algorithm can return different spanning trees for the same input graph G,
depending on how it breaks ties when the edges are sorted into order. Show that
for each minimum spanning tree T of G, there is a way to sort the edges of G in
Kruskal’s algorithm so that the algorithm returns T .

Suppose that we represent the graph G = (V,E) as an adjacency matrix. Give a
simple implementation of Prim’s algorithm for this case that runs in O(V^2) time

Suppose that all edge weights in a graph are integers in the range from 1 to jV j.
How fast can you make Kruskal’s algorithm run? What if the edge weights are
integers in the range from 1 to W for some constant W ?

Suppose that all edge weights in a graph are integers in the range from 1 to |V|.
How fast can you make Prim’s algorithm run? What if the edge weights are integers
in the range from 1 to W for some constant W ?

Suppose that the edge weights in a graph are uniformly distributed over the halfopen
interval [0,1) Which algorithm, Kruskal’s or Prim’s, can you make run
faster?

Suppose that a graph G has a minimum spanning tree already computed. How
quickly can we update the minimum spanning tree if we add a new vertex and
incident edges to G?

Show that the minimum spanning tree is unique, but that the second-best minimum
spanning tree need not be unique.

Show how to implement MST-REDUCE so that it runs in O(E). (Hint:
Use simple data structures.) 

For what values of |E| (in terms of |V|) does Prim’s algorithm with preprocessing
asymptotically beat Prim’s algorithm without preprocessing?

Argue that a minimum spanning tree is a bottleneck spanning tree.

Give a linear-time algorithm that given a graph G and an integer b, determines
whether the value of the bottleneck spanning tree is at most b.